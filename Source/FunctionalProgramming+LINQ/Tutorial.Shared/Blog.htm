<style type="text/css">
    article.blog-post li {
        list-style: none;
    }

    article.blog-post ol {
        counter-reset: item;
        padding: 0px;
    }

        article.blog-post ol ol {
            padding-left: 40px;
        }

        article.blog-post ol li:before {
            content: "Chapter " counters(item, ".", upper-roman) " ";
            counter-increment: item;
        }

        article.blog-post ol ol li:before {
            content: "§ " counters(item, ".") " ";
        }

    article.blog-post h1 {
        display: inline;
    }

    article.blog-post h2 {
        display: inline;
    }

    article.blog-post ol ol ul li:before {
        content: normal;
        counter-increment: none;
    }

    article.blog-post ul li {
        list-style: disc;
    }
</style>
<p><a href="$LinqViaCSharp7_Dixin_DesktopDesign.f[1].png"><img width="640" height="263" title="LinqViaCSharp7_Dixin_DesktopDesign.fw2.fw" style="border: 0px currentcolor; display: inline; background-image: none;" alt="LinqViaCSharp7_Dixin_DesktopDesign.fw2.fw" src="$LinqViaCSharp7_Dixin_DesktopDesign.f[2].png" border="0"></a></p>
<ul>
    <li><a href="#keywords">Keywords</a></li>
    <li><a href="#abstract">Abstract</a></li>
    <li><a href="#acclaim">Acclaim</a></li>
    <li><a href="#contentsataglance">Contents at a Glance</a></li>
    <li><a href="#contents">Table of Contents</a></li>
</ul>
<h1 id="keywords">Keywords</h1>
<p>.NET Core, .NET Framework, C# 7.x, Functional Programming, Lambda Calculus, Category Theory, LINQ, LINQ to Objects, LINQto XML, Parallel LINQ, LINQ to Entities, Entity Framework Core, Entity Framework.</p>
<h1 id="abstract">Abstract</h1>
<p>This is a latest, in-depth, cross-platform tutorial on functional programming and LINQ programming via C# 7.0 language. It discusses real world development to underlying mathematics theories. It covers both .NET Framework (for Windows development) and .NET Core (for Linux, Mac, and Windows development).</p><p>C# is an open source, cross-platform language from Microsoft, and LINQ is the built-in functional data query capabilities of the language, working with API sets provided by .NET libraries. This entire tutorial is based on the latest language and frameworks. It covers C#’s functional features and functional programming aspects, and the detailed usage and internal mechanisms of mainstream LINQ technologies for different data domains, including LINQ to Objects, Parallel LINQ, LINQ to XML, and LINQ to Entities. It also demystifies the underlying quintessential theories of functional programming and LINQ, including Lambda Calculus and Category Theory.</p>
<h1 id="acclaim">Acclaim</h1>
<p>The following are the acclaim from Microsoft:</p>
<ul>
    <li>
        “This book explains practical and in-depth material clearly, concisely and accurately to the areas of the C# language, functional programming, and LINQ on .NET Framework and .NET Core. This is a great book for anyone wanting to understand the whys and hows behind these important technologies.”
        <strong><br>Samer Boshra<br>Microsoft Principal Software Engineering Manager</strong>
    <li>
        “This book covers LINQ and underlying functional programming concepts comprehensively. It employs tutorials and examples to illustrate various features and applications. The underlying theory is thoroughly explained as well to strengthen your understanding of the topic. Whether you are a beginner or journeyman, you will gain in-depth knowledge of the subject through this book.”
        <strong><br>Alok Parmesh<br>Microsoft Senior Software Engineer</strong>
    <li>
        “This is an excellent book on LINQ as it goes beyond covering how to program with LINQ but articulates the theory behind it and mechanics of the language, a coverage which is not easy to come by. Understanding this level of detail is necessary to program with LINQ to develop first class applications that are efficient and maintainable.”
        <strong><br>Ari Bertan<br>Microsoft Senior Software Engineer</strong>
    <li>
        “This is a great book if you want to learn LINQ and functional programming with C# in depth. You can see Dixin’s deep expertise and feel his obsession for technologies. I started using C# since it was born, but I still learned new things from this book. It is an easy-to-read book, and there are lots of well-picked code examples. I have no doubt that readers will become experts on the topics after reading this book.”
        <strong><br>Paul Lou<br>Microsoft Senior Software Engineer</strong>
    <li>
        “This is a great book for C# developers, it covers both basic C# programming concepts for the beginners new to the .NET world, and C# advanced constructs for experienced .NET programmers. The book is up to date, talks C# 7.0 new language features and demonstrates how you can use them for functional programming. Thanks for the awesome work!”
        <strong><br>Mark Zhou<br>Microsoft Senior Software Engineer</strong>
    <li>
        “This is an excellent in-depth C# functional programming and LINQ book. It explains the latest technology with clear, concise and accurate examples. I would love to encourage everybody who wants to improve their productivity and efficiency of C# programming to have a read of this book.”
        <strong><br>Jacky Gao <br>Microsoft Research Software Engineer</strong>
    <li>
        “Since LINQ has been introduced into .NET Framework, it has been becoming more and more important and powerful for .NET developers. This book greatly breaks down LINQ and functional programming into well-organized pieces, and makes me much more easily understand how to use LINQ and functional programming better than I used to. I highly recommend this book to C# developers.”
        <strong><br>Tom Zhou<br>Microsoft Senior Software Engineer</strong>
    <li>
        “Awesome book for developers who are interested in learning or advancing LINQ or functional programming. It covers real world examples and theories. I have been using C# for more than 10 years but still learned new knowledge from this book. It is well organized and lots of concrete code samples, easy for readers to digest.”
        <strong><br>Carol Hu<br>Microsoft Senior Software Engineer</strong>
    <li>
        “I like the way the author presented the detailed knowledge with a lot of examples. As a data scientist with statistics background in a number of industries, I can pick up C# programming and LINQ quickly when I followed the book. The book was concise and easy to read. It was a pleasant experience for me to spend my time emerging myself in the book in the sunshine weekday afternoon.”
        <strong><br>Xue Liu<br>Microsoft Senior Data Scientist</strong>
    <li>
        “Great book! It takes a hands-on approach to LINQ and functional programming in an easy to understand format. I would highly recommend this book to developers looking to develop expertise in C#, functional programming, and LINQ.”
        <strong><br>Himanshu Lal<br>Microsoft Principal Software Engineering Manager</strong>
    <li>
        “An excellent book for those of us who need to get in-depth understanding on LINQ and functional programming with latest C# language. The author made sure this book includes the latest and cross-platform knowledge for the language, the framework, as well as the underlying mathematical theories.”
        <strong><br>Hongfei Guo<br>Microsoft Principal PM Manager</strong>
    <li>
        “This is a great book for developers who want to go functional programming. It's one-stop shopping for serious developers who have to get up to speed with LINQ and functional programming quickly and in-depth. I'll keep this book on my desk not on my bookshelf.”
        <strong>Roshan Kommussetty<br>Microsoft Senior Software Engineering Manager</strong>
    <li>
        “A C# functional programming book truly for .NET and .NET Core developers, from an authority on the subject. I'll be turning to this book first when I need to understand functional programming and LINQ..”
        <strong><br>Surabhi Pandey<br>Microsoft Senior Software Engineer</strong>
    </li>
</ul>
<p>The following are the acclaim from technical community:</p>
<ul>
    <li>
        “This book provides comprehensive and in-depth information about the C# functional programming and LINQ technologies to application developers on both .NET Framework and .NET Core. The detailed text and wealth of examples will give a developer a clear and solid understanding of C# language, functional programming and using LINQ to work with different data domains.”
        <strong><br>Dong Si<br>Assistant Professor, Department of Computer Science, University of Washington, Bothell</strong>
<li>
        “This book offers a comprehensive, in-depth, yet easy-to-understand tutorial to functional C# programming and LINQ. Filled with detailed explanations and real-world examples, this book is highly valuable for beginners and experienced developers alike.”
        <strong><br>Shuang Zhao<br>Assistant Professor, Department of Computer Science, University of California, Irvine</strong>
    <li>
        “This book provides very comprehensive treatment of functional programming and LINQ. Dixin did a tremendous job at collecting information and wrote real world examples. This book also covers underlying functional programming concepts in great detail and shows how to take advantage of the language features in everyday application code. I'm happy with the book and highly recommended it.”
        <strong><br>Yong Zheng<br>Google Senior Software Engineer</strong>
    <li>
        “This excellent book is an in-depth and also readable exploration of C# functional programming and LINQ programming. It covers .NET Framework and .NET Core in great detail.”
        <strong><br>Yang Sha<br>Google Senior Software Engineer</strong>
    <li>
        “Dixin did an excellent job to write this book for anyone who wants to learn LINQ/functional programming in C#. It has lots of very practical hands-on materials so it is very easy to learn from. It also contains lots of details and has well explained the theory, so it can be used as one-stop reference book!”
        <strong><br>Hua Wang<br>Uber Senior Software Engineer</strong>
    <li>
        “This is a great book that combines practical examples with in-depth analysis of LINQ and functional programming in C#. Dixin leverages his expertise in .NET to provide a well written tutorial on the effective use of LINQ and an overview of the theoretical principles behind it. A must read for anyone working on these technologies!”
        <strong><br>Dimitrios Soulios<br>Amazon Software Development Manager</strong>
    <li>
        “This book does a phenomenal job of explaining various facets of the LINQ and functional programming in C#. Tutorials provided in the book seamlessly fill the gap between the theory and its application. I highly recommend this book for both beginner and experienced developers in the .NET world.”
        <strong><br>Amit Soni<br>Amazon Software Engineer</strong>
    <li>
        “This is a really terrific .NET book, which covers C# language and LINQ in depth. And it enormously broadens my vision for the explanation about functional programming. It would be really helpful for my work in the future.”
        <strong><br>Kerry Jiang<br>MVP</strong>
    <li>
        “This book is a great tutorial. It covers LINQ and functional programming with the latest C# language. It is a fundamental and also in-depth book for both beginners and also experienced developers. If you want to have a deep dive into LINQ technologies, functional programming, and build cross platform applications, I highly recommend this book to you.”
        <strong><br>Tony Qu<br>MVP</strong>
    </li>
</ul>
<h1 id="contentsataglance">Contents at a Glance</h1>
<p>The contents are organized as the following chapters:</p>
<ul>
    <li>
        <b>Part 1 Code </b>- covers functional programming via C#, and fundamentals of LINQ.
        <ul>
            <li>
                <b>Chapter 1 Functional programming and LINQ paradigm</b>
                <ul>
                    <li>What is LINQ, how LINQ uses language to work with many different data domains.
                    <li>Programming paradigm, imperative vs. declarative programming, object-oriented vs. functional programming.</li>
                </ul>
            <li>
                <b>Chapter 2 Functional programming in depth</b>
                <ul>
                    <li>C# fundamentals for beginners.
                    <li>Aspects of functional programming via C#, including function type, named/anonymous/local function, closure, lambda, higher-order function, currying, partial application, first class function, function composition, query expression, covariance/contravariance, immutability, tuple, purity, async function, pattern matching, etc., including how C# is processed at compile time and runtime.</li>
                </ul>
            </li>
        </ul>
    <li>
        <b>Part 2 Data</b> - covers how to use functional LINQ to work with different data domains in the real world, and how LINQ works internally.
        <ul>
            <li>
                <b>Chapter 3 LINQ to Objects</b>
                <ul>
                    <li>How to use functional LINQ queries to work with objects, covering all LINQ and Ix.
                    <li>How the LINQ to Objects query methods are implemented, how to implement useful custom LINQ queries.</li>
                </ul>
            <li>
                <b>Chapter 4 LINQ to XML</b>
                <ul>
                    <li>How to modeling XML data, and use functional LINQ queries to work with XML data.
                    <li>How to use the other LINQ to XML APIs to manipulate XML data.</li>
                </ul>
            <li>
                <b>Chapter 5 Parallel LINQ</b>
                <ul>
                    <li>How to use parallelized functional LINQ queries to work with objects.
                    <li>Performance analysis for parallel/sequential LINQ queries.</li>
                </ul>
            <li>
                <b>Chapter 6 Entity Framework/Core and LINQ to Entities</b>
                <ul>
                    <li>How to model database with object-relational mapping, and use functional LINQ queries to work with relational data in database.
                    <li>How the C# LINQ to Entities queries are implemented to work with database.
                    <li>How to change data in database, and handle concurrent conflicts.
                    <li>Performance tips and asynchrony.</li>
                </ul>
            </li>
        </ul>
    <li>
        <b>Part 3 Theories</b> - demystifies the abstract mathematics theories, which are the rationale and foundations of LINQ and functional programming.
        <ul>
            <li>
                <b>Chapter 7 Lambda Calculus via C#</b>
                <ul>
                    <li>Core concepts of lambda calculus, bound and free variables, reduction (α-conversion, β-reduction, η-conversion), etc.
                    <li>How to use lambda functions to represent values, data structures and computation, including Church Boolean, Church numbers, Church pair, Church list, and their operations.
                    <li>Combinators and combinatory logic, including SKI combinator calculus, fixed point combinator for function recursion, etc.</li>
                </ul>
            <li>
                <b>Chapter 8 Category Theory via C#</b>
                <ul>
                    <li>Core concepts of category theory, including category, object, morphism, monoid, functor, natural transformation, applicative functor, monad, and their laws.
                    <li>How these concepts are applied in functional programming and LINQ.
                    <li>How to manage I/O, state, exception handling, shared environment, logging, and continuation, etc., in functional programming.</li>
                </ul>
            </li>
        </ul>
    </li>
</ul>
<p>This tutorial delivers highly reusable knowledge:</p>
<ul>
    <li>It covers C# language in depth, which can be generally applied in any programming paradigms besides functional programming.
    <li>It is a cross platform tutorial, covering both .NET Framework for Windows and .NET Core for Windows, Mac, Linux.
    <li>It demonstrates both usage and implementation of LINQ for mainstream data domains, which also enables developer to use the LINQ technologies for other data domains, or build custom LINQ APIs for specific data scenarios.
    <li>It also demystifies the abstract mathematics knowledge for functional programming, which applies to general functional programming, so it greatly helps developers understanding any other functional languages too.</li>
</ul>
<p>As a fun of functional programming, LINQ, C#, and .NET technologies, hope this helps.</p>
<p><a href="$20150522_202020724_iOS2.jpg"><img width="348" height="348" title="20150522_202020724_iOS" style="border: 0px currentcolor; display: inline; background-image: none;" alt="20150522_202020724_iOS" src="$20150522_202020724_iOS_thumb.jpg" border="0"></a></p>
<p>(Me [left] and Anders Hejlsberg [right], Father of C#)</p>
<h1 id="contents">Table of Contents</h1>
<p>All code examples are available on <a href="https://github.com/Dixin/CodeSnippets/tree/master/" target="_blank">GitHub</a>.</p>
<ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Introducing%20LINQ" target="_blank">Functional programming and LINQ paradigm</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-via-csharp-introduction" target="_blank">Getting started with .NET/Core, C# and LINQ</a></h2>
                <ul>
                    <li>
                        Cross platform .NET, C# and LINQ
                        <ul>
                            <li>.NET Framework
                            <li>Parallel LINQ
                            <li>.NET Core, UWP, Mono, Xamarin and Unity
                            <li>.NET Standard
                            <li>C# functional programming</li>
                        </ul>
                    <li>This tutorial
                    <li>Author
                    <li>Code examples
                    <li>
                        Start coding
                        <ul>
                            <li>Start coding with Visual Studio (Windows)
                            <li>Start coding with Visual Studio Code (Windows, macOS and Linux)
                            <li>Start coding with Visual Studio for Mac (macOS)</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/introducing-linq-3-waht-is-functional-programming" target="_blank">Programming paradigms and  functional programming</a></h2>
                <ul>
                    <li>Programming paradigms
                    <li>Imperative programming vs. declarative programming
                    <li>Object-oriented programming vs. functional programming</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/introducing-linq-2-what-is-linq" target="_blank">LINQ Overview</a></h2>
                <ul>
                    <li>
                        One language for different data domains
                        <ul>
                            <li>LINQ to Objects
                            <li>Parallel LINQ
                            <li>LINQ to XML
                            <li>LINQ to DataSets
                            <li>LINQ to Entities
                            <li>LINQ to SQL
                            <li>LINQ to NoSQL (LINQ to CosmosDB)
                            <li>LINQ to JSON
                            <li>LINQ to Twitter</li>
                        </ul>
                    <li>Productivity
                    <li>Local query vs. remote query</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Functional%20C%23" target="_blank">Functional programming in-depth</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-fundamentals" target="_blank">C# language fundamentals</a></h2>
                <ul>
                    <li>
                        Types and members
                        <ul>
                            <li>Built-in types</li>
                        </ul>
                    <li>
                        Reference type vs. value type
                        <ul>
                            <li>default literal expression
                            <li>ref structure</li>
                        </ul>
                    <li>Static class
                    <li>Partial type
                    <li>
                        Interface and implementation
                        <ul>
                            <li>IDisposable interface and using statement</li>
                        </ul>
                    <li>
                        Generic type
                        <ul>
                            <li>Type parameter</li>
                            <li>Type parameter constraints</li>
                        </ul>
                    <li>Nullable value type
                    <li>Auto property
                    <li>Property initializer
                    <li>Object initializer
                    <li>Collection initializer
                    <li>Index initializer
                    <li>Null coalescing operator
                    <li>Null conditional operator
                    <li>throw expression
                    <li>Exception filter
                    <li>String interpolation
                    <li>nameof operator</li>
                    <li>Digit separator and leading underscore</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-named-function-and-static-instance-extension-method" target="_blank">Named Function and function polymorphism</a></h2>
                <ul>
                    <li>Constructor, static constructor and finalizer
                    <li>Static method and instance method
                    <li>Extension method
                    <li>More named functions
                    <li>
                        Function polymorphisms
                        <ul>
                            <li>Ad hoc polymorphism: method overload
                            <li>
                                Parametric polymorphism: generic method
                                <ul>
                                    <li>Type argument inference</li>
                                </ul>
                            </li>
                        </ul>
                    <li>Static import</li>
                    <li>Partial method</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-local-function-and-closure" target="_blank">Local function and closure</a></h2>
                <ul>
                    <li>Local function
                    <li>
                        Closure
                        <ul>
                            <li>Outer variable
                            <li>Implicit reference</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-function-parameter-and-return-value" target="_blank">Function input and output</a></h2>
                <ul>
                    <li>
                    Pass by value vs. pass by reference (ref parameter)
                    <ul>
                        <li>Pass by read only reference (in parameter)</li>
                    </ul>
                    <li>Output parameter (out parameter) and out variable
                    <li>Parameter array
                    <li>Positional argument vs. named argument
                    <li>Required parameter vs. optional parameter
                    <li>Caller information parameter
                    <li>
                        Return by value vs. return by reference
                        <ul>
                            <li>Return by read only reference</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-function-type-and-delegate" target="_blank">Delegate: function type, instance, and group</a></h2>
                <ul>
                    <li>
                        Delegate type as function type
                        <ul>
                            <li>Function type
                            <li>Generic delegate type
                            <li>Unified built-in delegate types</li>
                        </ul>
                    <li>
                        Delegate instance as function instance
                        <ul>
                            <li>Delegate class and delegate instance</li>
                        </ul>
                    <li>
                        Delegate instance as function group
                        <ul>
                            <li>Event and event handler</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-anonymous-function-and-lambda-expression" target="_blank">Anonymous function and lambda expression</a></h2>
                <ul>
                    <li>Anonymous method
                    <li>Lambda expression
                    <li>Call anonymous function
                    <li>Closure
                    <li>Expression bodied function member</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-function-as-data-and-expression-tree" target="_blank">Expression tree: Function as data</a></h2>
                <ul>
                    <li>
                        Lambda expression as expression tree
                        <ul>
                            <li>Code as data
                            <li>.NET expressions</li>
                        </ul>
                    <li>
                        Compile expression tree at runtime
                        <ul>
                            <li>Traverse expression tree
                            <li>Expression tree to CIL at runtime
                            <li>Expression tree to executable function at runtime</li>
                        </ul>
                    <li>Expression tree and LINQ remote query</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-higher-order-function-currying-and-first-class-function" target="_blank">Higher-order function, currying and first class function</a></h2>
                <ul>
                    <li>First order and higher-order function
                    <li>Curry function
                    <li>=&gt; associativity
                    <li>Partial apply function
                    <li>Uncurry function
                    <li>First-class function</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-function-composition-and-method-chaining" target="_blank">Function composition and chaining</a></h2>
                <ul>
                    <li>Forward and backward composition
                    <li>Forward pipe
                    <li>
                        Fluent chaining
                        <ul>
                            <li>Fluent extension methods</li>
                        </ul>
                    <li>LINQ query method composition</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-query-expression" target="_blank">LINQ query Expression</a></h2>
                <ul>
                    <li>Syntax and compilation
                    <li>Query expression pattern
                    <li>LINQ query expression
                    <li>Query expression vs. query method</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-covariance-and-contravariance" target="_blank">Covariance and contravariance</a></h2>
                <ul>
                    <li>Non-generic function type
                    <li>Generic function type
                    <li>Generic interface
                    <li>Generic higher-order function type
                    <li>Array
                    <li>Variances in .NET and LINQ</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-immutability-anonymous-type-and-tuple" target="_blank">Immutability, anonymous type and tuple</a></h2>
                <ul>
                    <li>
                        Immutable value
                        <ul>
                            <li>Constant
                            <li>using statement and foreach statement
                            <li>this reference for class
                            <li>Function’s readonly parameter and readonly return
                            <li>Local variable by readonly reference (ref readonly variable)
                            <li>Immutable value in LINQ query expression</li>
                        </ul>
                    <li>Immutable state (immutable data type)
                        <ul>
                            <li>Type with constant field
                            <li>Immutable class with readonly instance field
                            <li>Immutable structure (readonly structure)
                            <li>Immutable anonymous type
                            <li>
                                Immutable tuple vs. mutable tuple
                                <ul>
                                    <li>Construction and element name
                                    <li>Deconstruction
                                    <li>Tuple assignment</li>
                                </ul>
                            <li>Immutable collection vs. readonly collection</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-pure-function" target="_blank">Pure function</a></h2>
                <ul>
                    <li>Referential transparency and side effect free
                    <li>PureAttribute and code contracts
                    <li>Purity in .NET</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-asynchronous-function" target="_blank">Asynchronous function</a></h2>
                <ul>
                    <li>Task, Task&lt;TResult&gt; and asynchrony
                    <li>Named async function
                    <li>Awaitable-awaiter pattern
                    <li>Async state machine
                    <li>
                        Generalized async return type and async method builder
                        <ul>
                            <li>ValueTask&lt;TResult&gt; and performance</li>
                        </ul>
                    <li>Runtime context capture
                    <li>Anonymous async function</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/functional-csharp-pattern-matching" target="_blank">Pattern matching</a></h2>
                <ul>
                    <li>Is expression
                    <li>Switch statement</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/LINQ%20to%20Objects" target="_blank">LINQ to Objects: Querying objects in memory</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-local-sequential-query" target="_blank">Sequential LINQ query</a></h2>
                <ul>
                    <li>Iteration pattern and foreach statement
                    <li>
                        IEnumerable&lt;T&gt; and IEnumerator&lt;T&gt;
                        <ul>
                            <li>EnumerableAssert utility
                            <li>foreach loop vs. for loop
                            <li>Non-generic sequence vs. generic sequence</li>
                        </ul>
                    <li>LINQ to Objects queryable types</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-query-methods-operators-and-query-expressions" target="_blank">LINQ to Objects standard queries and query expressions</a></h2>
                <ul>
                    <li>
                        Return a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Generation: Empty , Range, Repeat, DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType, where
                            <li>Mapping (projection): Select, SelectMany, from, let, select
                            <li>Grouping: GroupBy, group, by, into
                            <li>
                                Join
                                <ul>
                                    <li>Inner join: Join, SelectMany, join, on, equals
                                    <li>Outer join: GroupJoin, join, into, on, equals
                                    <li>Cross join: SelectMany, Join, from select, join, on, equals</li>
                                </ul>
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Convolution: Zip
                            <li>Partitioning: Take, Skip, TakeWhile, SkipWhile
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending, Reverse, orderby, ascending, descending, into
                            <li>Conversion: Cast, AsEnumerable</li>
                        </ul>
                    <li>
                        Return a new collection
                        <ul>
                            <li>Conversion: ToArray, ToList, ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Last, LastOrDefault, ElementAt, ElementAtOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Aggregate, Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains
                            <li>Equality: SequenceEqual</li>
                        </ul>
                    <li>Queries in other languages</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-generator" target="_blank">Generator</a></h2>
                <ul>
                    <li>Implement iterator pattern
                    <li>Generate sequence and iterator
                    <li>Yield statement and generator
                    <li>Iterator and generator in other languages</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-deferred-execution-lazy-evaluation-and-eager-evaluation" target="_blank">Deferred execution, lazy evaluation and eager Evaluation</a></h2>
                <ul>
                    <li>
                        Deferred execution vs. immediate execution
                        <ul>
                            <li>Cold IEnumerable&lt;T&gt; vs. hot IEnumerable&lt;T&gt;</li>
                        </ul>
                    <li>Lazy evaluation vs. eager evaluation</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-query-methods-implementation" target="_blank">LINQ to Objects internals: Standard queries implementation</a></h2>
                <ul>
                    <li>Argument check and deferred execution
                    <li>
                        Return a new collection
                        <ul>
                            <li>Conversion: ToArray, ToList, ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Return a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Conversion: Cast, AsEnumerable
                            <li>Generation: Empty , Range, Repeat, DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType
                            <li>Mapping (projection): Select, SelectMany
                            <li>Grouping: GroupBy
                            <li>Join: SelectMany, Join, GroupJoin
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Convolution: Zip
                            <li>Partitioning: Take, Skip, TakeWhile, SkipWhile
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending, Reverse</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Last, LastOrDefault, ElementAt, ElementAtOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Aggregate, Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains
                            <li>Equality: SequenceEqual</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-interactive-extensions-ix" target="_blank">Microsoft Interactive Extensions (Ix): More powerful queries</a></h2>
                <ul>
                    <li>
                        Returns a new IEnumerable&lt;T&gt; sequence
                        <ul>
                            <li>Generation: Defer, Create, Return, Repeat
                            <li>Filtering: IgnoreElements, DistinctUntilChanged
                            <li>Mapping: SelectMany, Scan, Expand
                            <li>Concatenation: Concat, StartWith
                            <li>Set: Distinct
                            <li>Partitioning: TakeLast, SkipLast
                            <li>Conversion: Hide
                            <li>Buffering: Buffer, Share, Publish, Memoize
                            <li>Exception: Throw, Catch, Finally, OnErrorResumeNext, Retry
                            <li>Imperative: If, Case, Using, While, DoWhile, Generate, For
                            <li>Iteration: Do</li>
                        </ul>
                    <li>
                        Returns void
                        <ul>
                            <li>Iteration: ForEach</li>
                        </ul>
                    <li>
                        Returns a single value
                        <ul>
                            <li>Aggregation: Min, Max, MinBy, MaxBy
                            <li>Quantifiers: isEmpty</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-objects-custom-query-methods" target="_blank">Building custom queries</a></h2>
                <ul>
                    <li>
                        Returns a new IEnumerable&lt;T&gt; sequence (deferred execution)
                        <ul>
                            <li>Generation: Create, RandomInt32, RandomDouble, FromValue, FromValues, EmptyIfNull
                            <li>Filtering: Timeout
                            <li>Concatenation: Join, Append, Prepend, AppendTo, PrependTo
                            <li>Partitioning: Subsequence
                            <li>Exception: Catch, Retry
                            <li>Comparison: OrderBy, OrderByDescending, ThenBy, ThenByDescending, GroupBy, Join, GroupJoin, Distinct, Union, Intersect, Except
                            <li>List: Insert, Remove, RemoveAll, RemoveAt</li>
                        </ul>
                    <li>
                        Returns a new collection
                        <ul>
                            <li>Comparison: ToDictionary, ToLookup</li>
                        </ul>
                    <li>
                        Returns a single value
                        <ul>
                            <li>List: IndexOf, LastIndexOf
                            <li>Aggregation: PercentileExclusive, PercentileInclusive, Percentile
                            <li>Quantifiers: IsNullOrEmpty, IsNotNullOrEmpty
                            <li>Comparison: Contains, SequenceEqual</li>
                        </ul>
                    <li>
                        Returns void
                        <ul>
                            <li>Iteration: ForEach</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/LINQ%20to%20XML" target="_blank">LINQ to XML: Querying XML</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-1-modeling-xml" target="_blank">Modeling XML</a></h2>
                <ul>
                    <li>Imperative vs. declarative paradigm
                    <li>Types, conversions and operators
                    <li>Read and deserialize XML
                    <li>Serialize and write XML
                    <li>Deferred construction</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-2-query-methods" target="_blank">LINQ to XML standard queries</a></h2>
                <ul>
                    <li>Navigation
                    <li>Ordering
                    <li>Comparison
                    <li>More useful queries
                    <li>XPath
                    <li>Generate XPath expression</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/linq-to-xml-3-manipulating-xml" target="_blank">Manipulating XML</a></h2>
                <ul>
                    <li>Clone
                    <li>Add, replace, delete, update, and events
                    <li>Annotation
                    <li>Validate with XSD
                    <li>Transform</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Parallel%20LINQ" target="_blank">Parallel LINQ: Querying objects in paralle</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-1-local-parallel-query-and-visualization" target="_blank">Parallel LINQ query and visualization</a></h2>
                <ul>
                    <li>Parallel LINQ classes and methods
                    <li>Parallel query vs. sequential query
                    <li>Execute parallel query
                    <li>
                        Visualize parallel query execution
                        <ul>
                            <li>Install and configure Concurrency Visualizer
                            <li>Visualize sequential and parallel LINQ queries
                            <li>Visualize chaining query methods</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-2-partitioning" target="_blank">Parallel LINQ internals: data partitioning</a></h2>
                <ul>
                    <li>
                        Partitioning algorithms and load balancing
                        <ul>
                            <li>Range partitioning
                            <li>Stripped partitioning
                            <li>Hash partitioning
                            <li>Chunk partitioning</li>
                        </ul>
                    <li>
                        Implement custom partitioner
                        <ul>
                            <li>Static partitioner
                            <li>Dynamic partitioner</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-3-query-methods" target="_blank">Parallel LINQ standard queries</a></h2>
                <ul>
                    <li>
                        Query settings
                        <ul>
                            <li>Cancellation
                            <li>Degree of parallelism
                            <li>Execution mode
                            <li>Merge the values</li>
                        </ul>
                    <li>
                        Ordering
                        <ul>
                            <li>Control the order
                            <li>Order and correctness
                            <li>Orderable partitioner</li>
                        </ul>
                    <li>
                        Aggregation
                        <ul>
                            <li>Commutativity, associativity and correctness
                            <li>Partition and merge</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/parallel-linq-4-performance" target="_blank">Parallel query performance</a></h2>
                <ul>
                    <li>Sequential vs. parallel
                    <li>CPU bound vs. IO bound
                    <li>Summary</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Entity%20Framework" target="_blank">Entity Framework/Core and LINQ to Entities: Querying relational data</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-1-remote-query" target="_blank">Remote LINQ query</a></h2>
                <ul>
                    <li>Entity Framework and Entity Framework Core
                    <li>SQL database
                    <li>Remote query vs. local query
                    <li>Function vs. expression tree</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-2-modeling-database-object-relational-mapping" target="_blank">Modeling Database: Object-Relational Mapping</a></h2>
                <ul>
                    <li>Data types
                    <li>
                        Database
                        <ul>
                            <li>Connection resiliency and execution strategy</li>
                        </ul>
                    <li>Tables</li>
                    <li>
                        Relationships
                        <ul>
                            <li>One-to-one
                            <li>One-to-many
                            <li>Many-to-many</li>
                        </ul>
                    <li>Inheritance
                    <li>Views
                    <li>Stored procedures and functions</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-3-logging-and-tracing-queries" target="_blank">Logging and tracing LINQ to Entities queries</a></h2>
                <ul>
                    <li>Application side logging
                    <li>Database side tracing with Extended Events</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-4-query-methods" target="_blank">LINQ to Entities standard queries</a></h2>
                <ul>
                    <li>
                        Return a new IQueryable&lt;T&gt; source
                        <ul>
                            <li>Generation: DefaultIfEmpty
                            <li>Filtering (restriction): Where, OfType
                            <li>Mapping (projection): Select
                            <li>Grouping: GroupBy
                            <li>
                                Join
                                <ul>
                                    <li>Inner join: Join, SelectMany, GroupJoin, Select
                                    <li>Outer join: GroupJoin, Select, SelectMany
                                    <li>Cross join and self join: SelectMany, Join</li>
                                </ul>
                            <li>Concatenation: Concat
                            <li>Set: Distinct, Union, Intersect, Except
                            <li>Partitioning: Take, Skip
                            <li>Ordering: OrderBy, ThenBy, OrderByDescending, ThenByDescending
                            <li>Conversion: Cast, AsQueryable</li>
                        </ul>
                    <li>
                        Return a single value
                        <ul>
                            <li>Element: First, FirstOrDefault, Single, SingleOrDefault
                            <li>Aggregation: Count, LongCount, Min, Max, Sum, Average
                            <li>Quantifier: All, Any, Contains</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-5-query-translation-implementation" target="_blank">LINQ to Entities internals: Query translation implementation</a></h2>
                <ul>
                    <li>
                        Code to LINQ expression tree
                        <ul>
                            <li>IQueryable&lt;T&gt; and IQueryProvider
                            <li>Queryable methods
                            <li>Build LINQ to Entities abstract syntax tree</li>
                        </ul>
                    <li>
                        .NET expression tree to database expression tree
                        <ul>
                            <li>Database query abstract syntax tree
                            <li>Compile LINQ expressions to database expressions
                            <li>Compile LINQ query method calls
                            <li>Compile .NET API calls
                            <li>Remote API call vs. local API call
                            <li>Compile database function call</li>
                        </ul>
                    <li>
                        Database expression tree to SQL
                        <ul>
                            <li>SQL generator and SQL command
                            <li>Generate SQL from database expression tree</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-6-query-data-loading" target="_blank">Loading query data</a></h2>
                <ul>
                    <li>
                        Deferred execution
                        <ul>
                            <li>Iterator pattern
                            <li>Lazy evaluation vs. eager evaluation</li>
                        </ul>
                    <li>Explicit loading
                    <li>Eager loading
                    <li>
                        Lazy loading
                        <ul>
                            <li>The N + 1 problem
                            <li>Disable lazy loading</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-7-data-changes-and-transactions" target="_blank">Manipulating relational data: Data change and transaction</a></h2>
                <ul>
                    <li>Repository pattern and unit of work pattern
                    <li>
                        Track entities and changes
                        <ul>
                            <li>Track entities
                            <li>Track entity changes and property changes
                            <li>Track relationship changes
                            <li>Enable and disable tracking</li>
                        </ul>
                    <li>
                        Change data
                        <ul>
                            <li>Create
                            <li>Update
                            <li>Delete</li>
                        </ul>
                    <li>
                        Transaction
                        <ul>
                            <li>Transaction with connection resiliency and execution strategy
                            <li>EF/Core transaction
                            <li>ADO.NET transaction
                            <li>Transaction scope</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-8-optimistic-concurrency" target="_blank">Resolving optimistic concurrency</a></h2>
                <ul>
                    <li>Detect concurrent conflicts
                    <li>
                        Resolve concurrent conflicts
                        <ul>
                            <li>Retain database values (database wins)
                            <li>Overwrite database values (client wins)
                            <li>Merge with database values</li>
                        </ul>
                    <li>Save changes with concurrent conflict handling</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/entity-framework-core-and-linq-to-entities-9-performance" target="_blank">Performance</a></h2>
                <ul>
                    <li>
                        Initialization
                        <ul>
                            <li>Provider initialization
                            <li>Database initialization
                            <li>Mapping views initialization</li>
                        </ul>
                    <li>
                        Cache
                        <ul>
                            <li>Entity cache
                            <li>LINQ query translation cache
                            <li>SQL query plan cache</li>
                        </ul>
                    <li>
                        Asynchrony
                        <ul>
                            <li>Asynchronous data queries and data changes
                            <li>Transactions and connection resiliency with asynchronous operations
                            <li>Asynchronous concurrent conflicts</li>
                        </ul>
                    </li>
                </ul>
            </li>
        </ol>
        <!--<li>
        <h1>LINQ to SQL</h1>
        <ol>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/03/29/understanding-linq-to-sql-1-object-relational-mapping.aspx" target="_blank">Object-Relational Mapping</a></h2>
        <ul>
            <li>Create C# models from SQL schema
            <li>Implement the mapping
            <li>Customize the mapping
            <li>
            Work with model
            <ul>
                <li>Partial class
                <li>Partial method
                <li>INotifyPropertyChanging and INotifyPropertyChanged interfaces</li>
            </ul>
            <li>Create SQL schema from C# models</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/03/30/understanding-linq-to-sql-2-iqueryable-lt-t-gt.aspx" target="_blank">IQueryable&lt;T&gt;</a></h2>
        <ul>
            <li>IQueryable and IQueryable&lt;T&gt;
            <li>IQueryable and IQueryable&lt;T&gt; extensions
            <li>Table&lt;T&gt;
            <li>IEnumerable&lt;T&gt; extensions vs. IQueryable&lt;T&gt; extensions</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/06/understanding-linq-to-sql-3-expression-tree.aspx" target="_blank">Expression Tree</a></h2>
        <ul>
            <li>Anonymous method vs. expression tree
            <li>Expression tree for LINQ to SQL
            <li>Translate expression tree to SQL
            <li>Expression tree types
            <li>Expression tree for DLR
            <li>Visualize expression tree while debugging</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/15/understanding-linq-to-sql-4-data-retrieving-via-query-methods.aspx" target="_blank">Data Retrieving Via Query Methods</a></h2>
        <ul>
            <li>Supported and Unsupported query methods
            <li>
            Restriction
            <ul>
                <li>WHERE
                <li>AND / OR
                <li>LIKE
                <li>IN
                <li>IS / NOT / NULL</li>
            </ul>
            <li>
            Projection
            <ul>
                <li>SELECT
                <li>Explicitly construct entity
                <li>CASE</li>
            </ul>
            <li>
            Ordering
            <ul>
                <li>ORDER BY / ASC / DESC</li>
            </ul>
            <li>
            Join
            <ul>
                <li>Natural join
                <li>INNER JOIN
                <li>
                OUTER JOIN
                <ul>
                    <li>Association</li>
                </ul>
                <li>CROSS JOIN
                <li>Self JOIN</li>
            </ul>
            <li>
            Grouping and aggregation
            <ul>
                <li>GROUP BY / aggregate functions
                <li>HAVING</li>
            </ul>
            <li>
            Set
            <ul>
                <li>DISTINCT
                <li>UNION
                <li>EXISTS
                <li>NOT EXISTS</li>
            </ul>
            <li>
            Partitioning
            <ul>
                <li>TOP
                <li>ROW_NUMBER()
                <li>BETWEEN … AND</li>
            </ul>
            <li>
            Concatenation
            <ul>
                <li>UNION ALL</li>
            </ul>
            <li>
            Qualifiers
            <ul>
                <li>CASE / EXISTS</li>
            </ul>
            <li>Other query methods</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/19/understanding-linq-to-sql-5-remote-and-local-method-call.aspx" target="_blank">Remote And Local Method Call</a></h2>
        <ul>
            <li>Remote method call
            <li>Local method call
            <li>Remote method recognition</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/19/understanding-linq-to-sql-6-working-with-deferred-execution.aspx" target="_blank">Working With Deferred Execution</a></h2>
        <ul>
            <li>Deferred execution and DataContext
            <li>
                Deferred execution and eager loading
                <ul>
                    <li>DataLoadOptions.LoadWith()
                    <li>DataLoadOptions.AssociateWith()
                    <li>DataContext.DeferredLoadingEnabled</li>
                </ul>
            </li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/20/understanding-linq-to-sql-7-data-changing.aspx" target="_blank">Data Changing</a></h2>
        <ul>
            <li>
            Object Identity
            <ul>
                <li>Identity of entity objects
                <li>Identity and DataContext
                <li>Identity of projected objects (non-entity objects)</li>
            </ul>
            <li>
            Track changes
            <ul>
                <li>State change
                <li>Association change
                <li>Change set</li>
            </ul>
            <li>
            Submit changes
            <ul>
                <li>
                INSERT
                <ul>
                    <li>Work with IDENTITY column</li>
                </ul>
                <li>UPDATE
                <li>DELETE</li>
            </ul>
            <li>Read-only DataContext</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/22/understanding-linq-to-sql-8-transaction.aspx" target="_blank" mce_href="/dixin/archive/2010/04/22/understanding-linq-to-sql-8-transaction.aspx">Transaction</a></h2>
        <ul>
            <li>Implementing transaction (BEGIN / COMMIT / ROLLBACK)
            <li>Default transaction
            <li>Custom transactions</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/04/26/understanding-linq-to-sql-9-concurrent-conflict.aspx" target="_blank" mce_href="/dixin/archive/2010/04/26/understanding-linq-to-sql-9-concurrent-conflict.aspx">Concurrent conflict</a></h2>
        <ul>
            <li>Conflicts in concurrent data access
            <li>
            Optimistic concurrency control
            <ul>
                <li>Update check
                <li>Time stamp</li>
            </ul>
            <li>
            Handle ChangeConflictException
            <ul>
                <li>Merge changes to resolve conflict</li>
            </ul>
            <li>More about concurrency</li>
        </ul>
        <li>
        <h2><a href="https://weblogs.asp.net/dixin/archive/2010/05/12/understanding-linq-to-sql-10-implementing-linq-to-sql-provider.aspx" target="_blank" mce_href="/dixin/archive/2010/05/12/understanding-linq-to-sql-10-implementing-linq-to-sql-provider.aspx">Implementing LINQ to SQL Provider</a></h2>
        <ul>
            <li>
            The provider model
            <ul>
                <li>Implement IQueryable&lt;T&gt; and IOrderedQueryable&lt;T&gt;
                <li>Implement IQueryProvider</li>
            </ul>
            <li>
            Query method internals
            <ul>
                <li>Deferred execution methods
                <li>Eager execution methods</li>
            </ul>
            <li>
            Work together
            <ul>
                <li>Query a collection of items (deferred execution)
                <li>Query a single item (eager execution)
                <li>Aggregate (eager execution)
                <li>SQL translating and executing</li>
            </ul>
            <li>
                LINQ Providers
                <ul>
                    <li>Built-in IQueryable LINQ Providers
                    <li>LINQ to Everything
                    <li>LINQ to Objects provider</li>
                </ul>
            </li>
        </ul>
        <li>
            <h2><a href="https://weblogs.asp.net/dixin/archive/2011/01/31/understanding-linq-to-sql-11-performance.aspx" target="_blank" mce_href="/dixin/archive/2011/01/31/understanding-linq-to-sql-11-performance.aspx">Performance</a></h2>
            <ul>
                <li>O/R mapping overhead
                <li>
                Data retrieving overhead
                <ul>
                    <li>Compiled query
                    <li>Static SQL / stored procedures without translating</li>
                </ul>
                <li>
                Data changing overhead
                <ul>
                    <li>Bulk deleting / updating</li>
                </ul>
                <li>
                    Query plan overhead
                    <ul>
                        <li>.NET 3.5
                        <li>.NET 4.0</li>
                    </ul>
                </li>
            </ul>
        </li>
        </ol>-->
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Lambda%20Calculus" target="_blank">Lambda Calculus via C#: The fundation of all functional programming</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-c-1-fundamentals" target="_blank">Fundamentals</a></h2>
                <ul>
                    <li>
                        Expression
                        <ul>
                            <li>Bound variable vs. free variable</li>
                        </ul>
                    <li>
                        Reductions
                        <ul>
                            <li>α-conversion (alpha-conversion)
                            <li>β-reduction (beta-reduction)
                            <li>η-conversion (eta-conversion)</li>
                            <li>Normal order
                            <li>Applicative order</li>
                        </ul>
                    <li>
                        Function composition
                        <ul>
                            <li>Associativity
                            <li>Unit</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-c-2-boolean-and-logic" target="_blank">Church encoding: Function as boolean and logic</a></h2>
                <ul>
                    <li>Church encoding
                    <li>Church Boolean
                    <li>Logical operators
                    <li>Conversion between Church Boolean and System.Boolean
                    <li>If</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-csharp-3-numeral-arithmetic-and-predicate" target="_blank">Church encoding: Function as numeral, arithmetic and predicate</a></h2>
                <ul>
                    <li>Church numerals
                    <li>Increase and decrease
                    <li>Arithmetic operators
                    <li>
                        Predicate and relational operators
                        <ul>
                            <li>Attempt of recursion</li>
                        </ul>
                    <li>Conversion between Church numeral and System.UInt32</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-csharp-4-tuple-and-signed-numeral" target="_blank">Church encoding: Function as uple and signed numeral</a></h2>
                <ul>
                    <li>
                        Church pair (2-tuple)
                        <ul>
                            <li>Tuple operators</li>
                        </ul>
                    <li>N-tuple
                    <li>
                        Signed numeral
                        <ul>
                            <li>Arithmetic operators</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-csharp-5-list" target="_blank">Church encoding: Function as list</a></h2>
                <ul>
                    <li>
                        Tuple as list node
                        <ul>
                            <li>List operators</li>
                        </ul>
                    <li>
                        Aggregation function as list node
                        <ul>
                            <li>List operators</li>
                        </ul>
                    <li>Model everything</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-csharp-6-combinatory-logic" target="_blank">Combinatory logic</a></h2>
                <ul>
                    <li>Combinator
                    <li>
                        SKI combinator calculus
                        <ul>
                            <li>SKI compiler: compile lambda calculus expression to SKI calculus combinator</li>
                        </ul>
                    <li>Iota combinator calculus</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-csharp-7-fixed-point-combinator-and-recursion" target="_blank">Fixed point combinator and recursion</a></h2>
                <ul>
                    <li>Normal order fixed point combinator (Y combinator) and recursion
                    <li>Applicative order fixed point combinator (Z combinator) and recursion</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/lambda-calculus-via-c-sharp-24-undecidability-of-equivalence" target="_blank">Undecidability of equivalence</a><</h2>
                <ul>
                    <li>Halting problem
                    <li>Equivalence problem</li>
                </ul>
            </li>
        </ol>
    <li>
        <h1><a href="https://weblogs.asp.net/dixin/Tags/Category%20Theory" target="_blank">Category Theory via C#: The essentials and design of LINQ</a></h1>
        <ol>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-1-fundamentals" target="_blank">Fundamentals: Category and morphism</a></h2>
                <ul>
                    <li>Category and category laws
                    <li>DotNet category</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-2-monoid" target="_blank">Monoid</a></h2>
                <ul>
                    <li>Monoid and monoid laws
                    <li>Monoid as category</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-3-functor-and-linq-to-functors" target="_blank">Functor and LINQ to Functors</a></h2>
                <ul>
                    <li>
                        Functor and functor laws
                        <ul>
                            <li>Endofunctor
                            <li>Type constructor and higher-kinded type</li>
                        </ul>
                    <li>
                        LINQ to Functors
                        <ul>
                            <li>Built-in IEnumerable&lt;&gt; functor
                            <li>Functor pattern of LINQ</li>
                        </ul>
                    <li>More LINQ to Functors</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-4-natural-transformation" target="_blank">Natural Transformation</a></h2>
                <ul>
                    <li>Natural transformation and naturality
                    <li>
                        Functor Category
                        <ul>
                            <li>Endofunctor category</li>
                        </ul>
                    </li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-5-bifunctor" target="_blank">Bifunctor</a></h2>
                <ul>
                    <li>Bifunctor
                    <li>Monoidal category</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-6-monoidal-functor-and-applicative-functor" target="_blank">Monoidal functor and applicative functor</a></h2>
                <ul>
                    <li>
                        Monoidal functor
                        <ul>
                            <li>IEnumeable&lt;&gt; monoidal functor</li>
                        </ul>
                    <li>
                        Applicative functor
                        <ul>
                            <li>IEnumeable&lt;&gt; applicative functor</li>
                        </ul>
                    <li>Monoidal functor vs. applicative functor
                    <li>More Monoidal functors and applicative functors</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-7-monad-and-linq-to-monads" target="_blank">Monad and LINQ to Monads</a></h2>
                <ul>
                    <li>Monad
                    <li>
                        LINQ to Monads and monad laws
                        <ul>
                            <li>Built-in IEnumerable&lt;&gt; monad
                            <li>Monad laws and Kleisli composition
                            <li>Kleisli category
                            <li>Monad pattern of LINQ</li>
                        </ul>
                    <li>Monad vs. monoidal/applicative functor
                    <li>More LINQ to Monads</li>
                </ul>
            <li>
                <h2><a href="https://weblogs.asp.net/dixin/category-theory-via-csharp-8-more-linq-to-monads" target="_blank">Advanced LINQ to Monads</a></h2>
                <ul>
                    <li>IO monad
                    <li>State monad
                    <li>Try monad
                    <li>Reader monad
                    <li>Writer monad
                    <li>Continuation monad</li>
                </ul>
            </li>
        </ol>
    </li>
</ol>
