//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Tutorial.LinqToEntities.AdventureWorks),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets50f25f05028138b93246b0583a16214d0a3fe7ef6afcb3d564b62434140f80bd))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets50f25f05028138b93246b0583a16214d0a3fe7ef6afcb3d564b62434140f80bd : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "50f25f05028138b93246b0583a16214d0a3fe7ef6afcb3d564b62434140f80bd"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Employee")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Person")
            {
                return GetView1();
            }

            if (extentName == "AdventureWorks.Employees")
            {
                return GetView2();
            }

            if (extentName == "AdventureWorks.People")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.ProductCategory")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.ProductSubcategory")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Product")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.ProductProductPhoto")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.ProductPhoto")
            {
                return GetView8();
            }

            if (extentName == "AdventureWorks.ProductCategories")
            {
                return GetView9();
            }

            if (extentName == "AdventureWorks.ProductSubcategories")
            {
                return GetView10();
            }

            if (extentName == "AdventureWorks.Products")
            {
                return GetView11();
            }

            if (extentName == "AdventureWorks.ProductProductPhotoes")
            {
                return GetView12();
            }

            if (extentName == "AdventureWorks.ProductPhotos")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.TransactionHistory")
            {
                return GetView14();
            }

            if (extentName == "AdventureWorks.Transactions")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.vEmployee")
            {
                return GetView16();
            }

            if (extentName == "AdventureWorks.vEmployees")
            {
                return GetView17();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Employee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employee
        [CodeFirstDatabaseSchema.Employee](T1.Employee_BusinessEntityID, T1.Employee_JobTitle, T1.Employee_HireDate)
    FROM (
        SELECT 
            T.BusinessEntityID AS Employee_BusinessEntityID, 
            T.JobTitle AS Employee_JobTitle, 
            T.HireDate AS Employee_HireDate, 
            True AS _from0
        FROM AdventureWorks.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_BusinessEntityID, T1.Person_FirstName, T1.Person_LastName)
    FROM (
        SELECT 
            T.BusinessEntityID AS Person_BusinessEntityID, 
            T.FirstName AS Person_FirstName, 
            T.LastName AS Person_LastName, 
            True AS _from0
        FROM AdventureWorks.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [Tutorial.LinqToEntities.Employee](T1.Employee_BusinessEntityID, T1.Employee_JobTitle, T1.Employee_HireDate)
    FROM (
        SELECT 
            T.BusinessEntityID AS Employee_BusinessEntityID, 
            T.JobTitle AS Employee_JobTitle, 
            T.HireDate AS Employee_HireDate, 
            True AS _from0
        FROM CodeFirstDatabase.Employee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.People.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing People
        [Tutorial.LinqToEntities.Person](T1.Person_BusinessEntityID, T1.Person_FirstName, T1.Person_LastName)
    FROM (
        SELECT 
            T.BusinessEntityID AS Person_BusinessEntityID, 
            T.FirstName AS Person_FirstName, 
            T.LastName AS Person_LastName, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductCategory
        [CodeFirstDatabaseSchema.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_Name)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            True AS _from0
        FROM AdventureWorks.ProductCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductSubcategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductSubcategory
        [CodeFirstDatabaseSchema.ProductSubcategory](T1.ProductSubcategory_ProductSubcategoryID, T1.ProductSubcategory_Name, T1.ProductSubcategory_ProductCategoryID)
    FROM (
        SELECT 
            T.ProductSubcategoryID AS ProductSubcategory_ProductSubcategoryID, 
            T.Name AS ProductSubcategory_Name, 
            T.ProductCategoryID AS ProductSubcategory_ProductCategoryID, 
            True AS _from0
        FROM AdventureWorks.ProductSubcategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Product.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Product
        [CodeFirstDatabaseSchema.Product](T1.Product_ProductID, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID, T1.Product_RowVersion)
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.Name AS Product_Name, 
            T.ListPrice AS Product_ListPrice, 
            T.ProductSubcategoryID AS Product_ProductSubcategoryID, 
            T.RowVersion AS Product_RowVersion, 
            True AS _from0
        FROM AdventureWorks.Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductProductPhoto.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductProductPhoto
        [CodeFirstDatabaseSchema.ProductProductPhoto](T1.ProductProductPhoto_ProductID, T1.ProductProductPhoto_ProductPhotoID)
    FROM (
        SELECT 
            T.ProductID AS ProductProductPhoto_ProductID, 
            T.ProductPhotoID AS ProductProductPhoto_ProductPhotoID, 
            True AS _from0
        FROM AdventureWorks.ProductProductPhotoes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ProductPhoto.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductPhoto
        [CodeFirstDatabaseSchema.ProductPhoto](T1.ProductPhoto_ProductPhotoID, T1.ProductPhoto_LargePhotoFileName, T1.ProductPhoto_ModifiedDate)
    FROM (
        SELECT 
            T.ProductPhotoID AS ProductPhoto_ProductPhotoID, 
            T.LargePhotoFileName AS ProductPhoto_LargePhotoFileName, 
            T.ModifiedDate AS ProductPhoto_ModifiedDate, 
            True AS _from0
        FROM AdventureWorks.ProductPhotos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductCategories
        [Tutorial.LinqToEntities.ProductCategory](T1.ProductCategory_ProductCategoryID, T1.ProductCategory_Name)
    FROM (
        SELECT 
            T.ProductCategoryID AS ProductCategory_ProductCategoryID, 
            T.Name AS ProductCategory_Name, 
            True AS _from0
        FROM CodeFirstDatabase.ProductCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductSubcategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductSubcategories
        [Tutorial.LinqToEntities.ProductSubcategory](T1.ProductSubcategory_ProductSubcategoryID, T1.ProductSubcategory_Name, T1.ProductSubcategory_ProductCategoryID)
    FROM (
        SELECT 
            T.ProductSubcategoryID AS ProductSubcategory_ProductSubcategoryID, 
            T.Name AS ProductSubcategory_Name, 
            T.ProductCategoryID AS ProductSubcategory_ProductCategoryID, 
            True AS _from0
        FROM CodeFirstDatabase.ProductSubcategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [Tutorial.LinqToEntities.Product](T1.Product_ProductID, T1.Product_Name, T1.Product_ListPrice, T1.Product_ProductSubcategoryID, T1.Product_RowVersion)
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.Name AS Product_Name, 
            T.ListPrice AS Product_ListPrice, 
            T.ProductSubcategoryID AS Product_ProductSubcategoryID, 
            T.RowVersion AS Product_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.Product AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductProductPhotoes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductProductPhotoes
        [Tutorial.LinqToEntities.ProductProductPhoto](T1.ProductProductPhoto_ProductID, T1.ProductProductPhoto_ProductPhotoID)
    FROM (
        SELECT 
            T.ProductID AS ProductProductPhoto_ProductID, 
            T.ProductPhotoID AS ProductProductPhoto_ProductPhotoID, 
            True AS _from0
        FROM CodeFirstDatabase.ProductProductPhoto AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.ProductPhotos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductPhotos
        [Tutorial.LinqToEntities.ProductPhoto](T1.ProductPhoto_ProductPhotoID, T1.ProductPhoto_LargePhotoFileName, T1.ProductPhoto_ModifiedDate)
    FROM (
        SELECT 
            T.ProductPhotoID AS ProductPhoto_ProductPhotoID, 
            T.LargePhotoFileName AS ProductPhoto_LargePhotoFileName, 
            T.ModifiedDate AS ProductPhoto_ModifiedDate, 
            True AS _from0
        FROM CodeFirstDatabase.ProductPhoto AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TransactionHistory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TransactionHistory
        [CodeFirstDatabaseSchema.TransactionHistory](T2.TransactionHistory_TransactionID, T2.TransactionHistory_ProductID, T2.TransactionHistory_TransactionDate, T2.TransactionHistory_Quantity, T2.TransactionHistory_ActualCost, T2.TransactionHistory_TransactionType)
    FROM (
        SELECT -- Constructing TransactionType
            T1.TransactionHistory_TransactionID, 
            T1.TransactionHistory_ProductID, 
            T1.TransactionHistory_TransactionDate, 
            T1.TransactionHistory_Quantity, 
            T1.TransactionHistory_ActualCost, 
            CASE
                WHEN T1._from2 THEN N'P'
                WHEN T1._from3 THEN N'S'
                ELSE N'W'
            END AS TransactionHistory_TransactionType
        FROM (
            SELECT 
                T.TransactionID AS TransactionHistory_TransactionID, 
                T.ProductID AS TransactionHistory_ProductID, 
                T.TransactionDate AS TransactionHistory_TransactionDate, 
                T.Quantity AS TransactionHistory_Quantity, 
                T.ActualCost AS TransactionHistory_ActualCost, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [Tutorial.LinqToEntities.WorkTransactionHistory]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Tutorial.LinqToEntities.PurchaseTransactionHistory]) THEN True ELSE False END AS _from2, 
                CASE WHEN T IS OF (ONLY [Tutorial.LinqToEntities.SalesTransactionHistory]) THEN True ELSE False END AS _from3
            FROM AdventureWorks.Transactions AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.Transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transactions
        CASE
            WHEN T1._from2 THEN [Tutorial.LinqToEntities.PurchaseTransactionHistory](T1.TransactionHistory_TransactionID, T1.TransactionHistory_ProductID, T1.TransactionHistory_TransactionDate, T1.TransactionHistory_Quantity, T1.TransactionHistory_ActualCost)
            WHEN T1._from3 THEN [Tutorial.LinqToEntities.SalesTransactionHistory](T1.TransactionHistory_TransactionID, T1.TransactionHistory_ProductID, T1.TransactionHistory_TransactionDate, T1.TransactionHistory_Quantity, T1.TransactionHistory_ActualCost)
            ELSE [Tutorial.LinqToEntities.WorkTransactionHistory](T1.TransactionHistory_TransactionID, T1.TransactionHistory_ProductID, T1.TransactionHistory_TransactionDate, T1.TransactionHistory_Quantity, T1.TransactionHistory_ActualCost)
        END
    FROM (
        SELECT 
            T.TransactionID AS TransactionHistory_TransactionID, 
            T.ProductID AS TransactionHistory_ProductID, 
            T.TransactionDate AS TransactionHistory_TransactionDate, 
            T.Quantity AS TransactionHistory_Quantity, 
            T.ActualCost AS TransactionHistory_ActualCost, 
            True AS _from0, 
            CASE WHEN T.TransactionType = N'W' THEN True ELSE False END AS _from1, 
            CASE WHEN T.TransactionType = N'P' THEN True ELSE False END AS _from2, 
            CASE WHEN T.TransactionType = N'S' THEN True ELSE False END AS _from3
        FROM CodeFirstDatabase.TransactionHistory AS T
        WHERE T.TransactionType IN {N'P', N'S', N'W'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.vEmployee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vEmployee
        [CodeFirstDatabaseSchema.vEmployee](T1.vEmployee_BusinessEntityID, T1.vEmployee_FirstName, T1.vEmployee_LastName, T1.vEmployee_JobTitle)
    FROM (
        SELECT 
            T.BusinessEntityID AS vEmployee_BusinessEntityID, 
            T.FirstName AS vEmployee_FirstName, 
            T.LastName AS vEmployee_LastName, 
            T.JobTitle AS vEmployee_JobTitle, 
            True AS _from0
        FROM AdventureWorks.vEmployees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AdventureWorks.vEmployees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing vEmployees
        [Tutorial.LinqToEntities.vEmployee](T1.vEmployee_BusinessEntityID, T1.vEmployee_FirstName, T1.vEmployee_LastName, T1.vEmployee_JobTitle)
    FROM (
        SELECT 
            T.BusinessEntityID AS vEmployee_BusinessEntityID, 
            T.FirstName AS vEmployee_FirstName, 
            T.LastName AS vEmployee_LastName, 
            T.JobTitle AS vEmployee_JobTitle, 
            True AS _from0
        FROM CodeFirstDatabase.vEmployee AS T
    ) AS T1");
        }
    }
}
